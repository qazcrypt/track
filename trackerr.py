from beem import Hive
from beem.account import Account
from beem.amount import Amount
import requests
import time
import json
import os
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
# Hive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "hive_account": "huobi-earn",
    "hive_state_file": "hive_tracker_state.json",
    
    # EOS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "eos_account": "binancentwrk",
    "eos_contract": "core.vaulta",
    "eos_api": "https://api.eosn.io",
    "eos_state_file": "vaulta_state.json",
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "telegram_bot_token": "7569935826:AAFlO8QYdC4la1kk2JynlR64V3IH0QxphZI",
    "telegram_chat_ids": ["8018300484", "7858883785", '8133353887'],
    "check_interval": 30
    
    # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã VAULTA
    "vaulta_price_api": "https://api.coingecko.com/api/v3/simple/price?ids=vaulta&vs_currencies=usd"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive
hive = Hive()

def get_hive_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É HIVE –≤ USD"""
    try:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=hive&vs_currencies=usd"
        response = requests.get(url)
        return response.json()["hive"]["usd"]
    except:
        try:
            ticker = hive.get_ticker()
            return float(ticker["latest"]) / float(ticker["hive_btc"])
        except:
            return 0.0

def get_vaulta_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É VAULTA –≤ USD"""
    try:
        response = requests.get(CONFIG['vaulta_price_api'])
        response.raise_for_status()
        return response.json()["vaulta"]["usd"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã VAULTA: {e}")
        return 0.0

def send_telegram_notification(message, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ================== HIVE –ú–û–ù–ò–¢–û–†–ò–ù–ì ==================
def format_hive_amount(amount_str, hive_price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É HIVE —Å USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º"""
    amount = Amount(amount_str)
    symbol = amount.symbol
    usd_value = amount.amount * hive_price if symbol == "HIVE" else amount.amount
    return f"{amount} (${usd_value:.2f})", amount.amount, symbol

def load_hive_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Hive"""
    if os.path.exists(CONFIG['hive_state_file']):
        try:
            with open(CONFIG['hive_state_file'], 'r') as f:
                return json.load(f)
        except:
            pass
    return {"last_id": -1, "last_timestamp": ""}

def save_hive_state(state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Hive"""
    with open(CONFIG['hive_state_file'], 'w') as f:
        json.dump(state, f)

def monitor_hive_transactions():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Hive"""
    print("–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Hive —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    state = load_hive_state()
    last_id = state["last_id"]
    last_timestamp = state["last_timestamp"]
    
    while True:
        try:
            account = Account(CONFIG['hive_account'])
            current_hive_price = get_hive_price()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
            history = account.history_reverse(only_ops=["transfer"])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            for op in history:
                op_id = op["index"]
                op_timestamp = str(op["timestamp"])
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if op_id <= last_id or op_timestamp <= last_timestamp:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                is_incoming = op["to"] == CONFIG['hive_account']
                tx_type = "–≤—Ö–æ–¥—è—â–∞—è" if is_incoming else "–∏—Å—Ö–æ–¥—è—â–∞—è"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
                amount_str, amount_num, symbol = format_hive_amount(op["amount"], current_hive_price)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                backup_section = ""
                if is_incoming:
                    backup_amount = amount_num * 1.03
                    backup_usd = backup_amount * (current_hive_price if symbol == "HIVE" else 1)
                    backup_str = f"{backup_amount:.3f} {symbol} (${backup_usd:.2f})"
                    backup_section = f"\n*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞ –±–µ–∫–∞:*\n{backup_str}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üîî *–ù–æ–≤–∞—è {tx_type} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Hive!*\n\n"
                    f"‚Ä¢ *–¢–∏–ø:* {'üì• ' if is_incoming else 'üì§ '}{tx_type}\n"
                    f"‚Ä¢ *–°—É–º–º–∞:* {amount_str}\n"
                    f"‚Ä¢ *–û—Ç:* `{op['from']}`\n"
                    f"‚Ä¢ *–ö–æ–º—É:* `{op['to']}`\n"
                    f"‚Ä¢ *–ú–µ–º–æ:* {op['memo'] or 'üö´'}\n"
                    f"{backup_section}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã
                for chat_id in CONFIG['telegram_chat_ids']:
                    send_telegram_notification(message, chat_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                last_id = op_id
                last_timestamp = op_timestamp
                save_hive_state({"last_id": last_id, "last_timestamp": last_timestamp})
            
            time.sleep(CONFIG['check_interval'])
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Hive: {e}")
            time.sleep(CONFIG['check_interval'] * 2)

# ================== EOS (VAULTA) –ú–û–ù–ò–¢–û–†–ò–ù–ì ==================
def load_eos_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ EOS"""
    if os.path.exists(CONFIG['eos_state_file']):
        try:
            with open(CONFIG['eos_state_file'], 'r') as f:
                data = json.load(f)
                return data.get('last_global_sequence', 0)
        except:
            return 0
    return 0

def save_eos_state(sequence):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ EOS"""
    with open(CONFIG['eos_state_file'], 'w') as f:
        json.dump({'last_global_sequence': sequence}, f)

def get_token_transfers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–∞ VAULTA"""
    url = f"{CONFIG['eos_api']}/v2/history/get_actions"
    params = {
        "account": CONFIG['eos_account'],
        "filter": f"{CONFIG['eos_contract']}:transfer",
        "sort": "desc",
        "limit": 100
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json().get('actions', [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ EOS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []

def parse_transfer_data(action):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        act = action['act']
        data = act['data']
        return {
            'from': data['from'],
            'to': data['to'],
            'quantity': data['quantity'],
            'memo': data['memo'],
            'tx_id': action['trx_id'],
            'timestamp': action['timestamp'],
            'global_sequence': action['global_sequence'],
            'is_incoming': data['to'] == CONFIG['eos_account']
        }
    except KeyError:
        return None

def parse_quantity(quantity_str):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '100.0000 VAULT')"""
    try:
        amount, symbol = quantity_str.split()
        return float(amount), symbol
    except:
        return 0.0, "VAULT"

def monitor_eos_transactions():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π EOS (VAULTA —Ç–æ–∫–µ–Ω)"""
    print("–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ EOS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (VAULTA)...")
    last_global_sequence = load_eos_state()
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É VAULTA
            vaulta_price = get_vaulta_price()
            transactions = get_token_transfers()
            new_sequence = last_global_sequence
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            for action in reversed(transactions):
                global_sequence = action['global_sequence']
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if global_sequence <= last_global_sequence:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_data = parse_transfer_data(action)
                if not tx_data:
                    continue
                
                # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–∏–º–≤–æ–ª
                amount, symbol = parse_quantity(tx_data['quantity'])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º
                usd_value = amount * vaulta_price
                amount_str = f"{amount:.4f} {symbol} (${usd_value:.4f})"
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                backup_section = ""
                if tx_data['is_incoming']:
                    backup_amount = amount * 1.03
                    backup_usd = backup_amount * vaulta_price
                    backup_str = f"{backup_amount:.4f} {symbol} (${backup_usd:.4f})"
                    backup_section = f"\n*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞ –±–µ–∫–∞:*\n{backup_str}"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    "üöÄ *–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è VAULTA!*\n\n"
                    f"‚Ä¢ *–¢–∏–ø:* {'üì• –≤—Ö–æ–¥—è—â–∞—è' if tx_data['is_incoming'] else 'üì§ –∏—Å—Ö–æ–¥—è—â–∞—è'}\n"
                    f"‚Ä¢ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:* [{tx_data['tx_id'][:12]}...](https://bloks.io/transaction/{tx_data['tx_id']})\n"
                    f"‚Ä¢ *–í—Ä–µ–º—è:* {tx_data['timestamp']}\n"
                    f"‚Ä¢ *–û—Ç:* `{tx_data['from']}`\n"
                    f"‚Ä¢ *–ö–æ–º—É:* `{tx_data['to']}`\n"
                    f"‚Ä¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {amount_str}\n"
                    f"‚Ä¢ *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* {tx_data['memo'] or 'üö´'}"
                    f"{backup_section}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã
                for chat_id in CONFIG['telegram_chat_ids']:
                    send_telegram_notification(message, chat_id)
                
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è VAULTA: {tx_data['tx_id']}")
                new_sequence = max(new_sequence, global_sequence)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π sequence
            if new_sequence > last_global_sequence:
                last_global_sequence = new_sequence
                save_eos_state(new_sequence)
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ EOS: {e}")
        
        time.sleep(CONFIG['check_interval'])

# ================== –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ==================
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    hive_thread = threading.Thread(target=monitor_hive_transactions)
    eos_thread = threading.Thread(target=monitor_eos_transactions)
    
    hive_thread.daemon = True
    eos_thread.daemon = True
    
    hive_thread.start()
    eos_thread.start()
    
    print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤
    try:
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")